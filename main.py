import requests
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder

BOT_TOKEN = " "
ACCUWEATHER_API_KEY = " "
ACCUWEATHER_BASE_URL = "http://dataservice.accuweather.com"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_state = {}


def create_interval_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 1 –¥–µ–Ω—å", callback_data="interval_1")],
        [InlineKeyboardButton(text="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π", callback_data="interval_5")]
    ])
    return keyboard


def get_location_key(city_name):
    url = f"{ACCUWEATHER_BASE_URL}/locations/v1/cities/search"
    params = {"apikey": ACCUWEATHER_API_KEY, "q": city_name}
    response = requests.get(url, params=params)
    response.raise_for_status()
    data = response.json()
    if data:
        return data[0]["Key"]
    else:
        raise ValueError(f"–ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")


def get_weather_forecast(location_key, days):
    url = f"{ACCUWEATHER_BASE_URL}/forecasts/v1/daily/{days}day/{location_key}"
    params = {"apikey": ACCUWEATHER_API_KEY, "metric": True}
    response = requests.get(url, params=params)
    response.raise_for_status()
    return response.json()


@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_state[message.from_user.id] = {"route": [], "interval": None}
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã.\n"
        "–ù–∞—á–Ω–∏—Ç–µ —Å –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
        reply_markup=create_interval_keyboard()
    )


@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "ü§ñ –Ø ‚Äî –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Ç–æ—á–∫–∞—Ö –º–∞—Ä—à—Ä—É—Ç–∞.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≥–Ω–æ–∑–∞.\n"
        "/help ‚Äî –£–∑–Ω–∞—Ç—å –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–æ—Ç–∞.\n"
        "/weather ‚Äî –£–∫–∞–∑–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç (–Ω–∞—á–∞–ª—å–Ω—ã–π, –∫–æ–Ω–µ—á–Ω—ã–π, –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏) –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.\n\n"
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ /weather.\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (1 –∏–ª–∏ 5 –¥–Ω–µ–π).\n"
        "3. –£–∫–∞–∂–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç, –≤–≤–µ–¥—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ (–æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º).\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
    )
    await message.answer(help_text)


@dp.message(Command("weather"))
async def cmd_weather(message: Message):
    user_state[message.from_user.id] = {"route": [], "interval": None}
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã:",
        reply_markup=create_interval_keyboard()
    )


@dp.callback_query(F.data.startswith("interval_"))
async def handle_interval_selection(callback: CallbackQuery):
    interval = 1 if "interval_1" in callback.data else 5
    user_state[callback.from_user.id]["interval"] = interval
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {interval} –¥–µ–Ω—å{'–∞' if interval == 1 else '–µ–π'}.\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥ –≤–∞—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞."
    )


@dp.message(F.text)
async def handle_route_input(message: Message):
    user_id = message.from_user.id
    state = user_state.get(user_id)

    if not state or state["interval"] is None:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≥–Ω–æ–∑–∞ —á–µ—Ä–µ–∑ /start –∏–ª–∏ /weather."
        )
        return

    if message.text.lower() == "–≥–æ—Ç–æ–≤–æ":
        if len(state["route"]) < 2:
            await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ—Ä–æ–¥–∞ –º–∞—Ä—à—Ä—É—Ç–∞.")
        else:
            await generate_forecast(message, state)
        return

    state["route"].append(message.text.strip())
    if len(state["route"]) == 1:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ—Ä–æ–¥ –≤–∞—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.")
    elif len(state["route"]) == 2:
        await message.answer(
            "–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ'."
        )
    else:
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω –µ—â—ë –æ–¥–∏–Ω –≥–æ—Ä–æ–¥. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ'.")


async def generate_forecast(message: Message, state):
    try:
        interval = state["interval"]
        route = state["route"]
        forecast_text = "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞:\n\n"

        for city in route:
            location_key = get_location_key(city)
            forecast = get_weather_forecast(location_key, interval)
            forecast_text += f"üåç {city}:\n"

            for day in forecast["DailyForecasts"]:
                date = day["Date"][:10]
                min_temp = day["Temperature"]["Minimum"]["Value"]
                max_temp = day["Temperature"]["Maximum"]["Value"]
                conditions = day["Day"]["IconPhrase"]
                forecast_text += f"üìÖ {date}: {min_temp}¬∞C - {max_temp}¬∞C, {conditions}\n"

            forecast_text += "\n"

        await message.answer(forecast_text)
    except ValueError as e:
        await message.answer(str(e))
    except requests.RequestException:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö AccuWeather. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
